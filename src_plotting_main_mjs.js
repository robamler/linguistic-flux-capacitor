/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunklinguistic_flux_capacitor"] = self["webpackChunklinguistic_flux_capacitor"] || []).push([["src_plotting_main_mjs"],{

/***/ "./node_modules/css-loader/dist/cjs.js!./src/plotting/default.css":
/*!************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/plotting/default.css ***!
  \************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(function(i){return i[1]});\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"svg.plot {\\n    width: 100%;\\n    height: 100%;\\n}\\n\\nsvg.plot .plotBorders {\\n    fill: none;\\n    stroke: #000000;\\n    stroke-width: 2;\\n    stroke-linejoin: round;\\n}\\n\\nsvg.plot .axisLabel {\\n    font-size: 16pt;\\n    font-family: 'Arial', sans-serif;\\n    fill: #000000;\\n    text-align: center;\\n    text-anchor: middle\\n}\\n\\nsvg.plot .axisTickLabel {\\n    font-size: 12pt;\\n    font-family: 'Arial', sans-serif;\\n    fill: #000000;\\n}\\n\\nsvg.plot .xAxis .axisTickLabel {\\n    text-align: center;\\n    text-anchor: middle;\\n}\\n\\nsvg.plot .yAxis .axisTickLabel {\\n    text-align: end;\\n    text-anchor: end;\\n}\\n\\nsvg.plot .zeroLine {\\n    stroke: #ccc;\\n    stroke-width: 2;\\n    stroke-linecap: round;\\n    stroke-dasharray: 0 4;\\n}\\n\\nsvg.plot .axisTick {\\n    stroke: #777;\\n    stroke-width: 1.5;\\n    stroke-linecap: round;\\n}\\n\\nsvg.plot .invisible {\\n    fill: #fff;\\n    fill-opacity: 0;\\n    stroke: none;\\n}\\n\\nsvg.plot .plotPrompt {\\n    font-size: 55pt;\\n    font-family: 'Arial', sans-serif;\\n    fill: #bbb;\\n    text-align: center;\\n    text-anchor: middle;\\n    opacity: 0;\\n    display: none;\\n    transition: opacity 0.4s;\\n}\\n\\nsvg.plot .plotPromptOutline {\\n    stroke: #fff;\\n    fill: #fff;\\n    stroke-width: 5;\\n    filter: blur(0.01em);\\n    stroke-linecap: butt;\\n    stroke-linejoin: round;\\n}\\n\\nsvg.plot .hoverCursorContainer>.hoverCursor {\\n    transition: transform 0.2s cubic-bezier(.16, 1.36, .61, 1.39);\\n    transform: scale(1, 1);\\n}\\n\\nsvg.plot .hoverCursorContainer.hidden>.hoverCursor {\\n    transition: transform 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);\\n    transform: scale(0, 0);\\n}\\n\\nsvg.plot .hoverCursor {\\n    stroke: #ffffff;\\n    stroke-width: 1.5;\\n}\\n\\nsvg.plot .hoverCursorContainer.upsideDown>.noCaptureZone {\\n    transform: scaleY(-1);\\n}\\n\\nsvg.plot .lineGroup>.line {\\n    fill: none;\\n    transition: stroke-width 0.2s;\\n    transition: opacity 0.6s;\\n    stroke-width: 2;\\n    stroke-linecap: round;\\n    stroke-linejoin: round;\\n    opacity: 0.8;\\n}\\n\\nsvg.plot .lineGroup {\\n    cursor: pointer;\\n}\\n\\nsvg.plot .lineGroup.main {\\n    pointer-events: none;\\n    cursor: auto;\\n}\\n\\nsvg.plot .lineGroup.main>.line {\\n    stroke-width: 3;\\n    opacity: 1;\\n}\\n\\nsvg.plot .lineGroup:hover>.line, svg.plot .lineGroup.hovering>.line {\\n    animation: lineHover 0.5s cubic-bezier(.5, 0, .6, 1) infinite alternate;\\n    opacity: 1;\\n}\\n\\n@keyframes lineHover {\\n    from {\\n        stroke-width: 3.5;\\n    }\\n    to {\\n        stroke-width: 5;\\n    }\\n}\\n\\nsvg.plot .lineGroup>.bleed {\\n    fill: none;\\n    transition: stroke-width 0.2s;\\n    stroke-width: 5;\\n    stroke-linecap: round;\\n    stroke-linejoin: round;\\n    stroke: #ffffff;\\n}\\n\\nsvg.plot .lineGroup.main>.bleed {\\n    stroke-width: 6;\\n}\\n\\nsvg.plot .lineGroup:hover>.bleed {\\n    stroke-width: 6;\\n}\\n\\nsvg.plot .lineGroup>.mouseCapture {\\n    fill: none;\\n    stroke-width: 10;\\n    stroke-linecap: round;\\n    stroke-linejoin: round;\\n    stroke: #ffffff;\\n    stroke-opacity: 0;\\n}\\n\\nsvg.plot .lineGroup.main>.mouseCapture {\\n    stroke-width: 0;\\n}\\n\\nsvg.plot .lineGroup.color0>.line {\\n    stroke: #f94a01;\\n}\\n\\nsvg.plot .lineGroup.color1>.line {\\n    stroke: #6b42b6;\\n}\\n\\nsvg.plot .lineGroup.color2>.line {\\n    stroke: #11a854;\\n}\\n\\nsvg.plot .lineGroup.color3>.line {\\n    stroke: #128db2;\\n}\\n\\nsvg.plot .lineGroup.color4>.line {\\n    stroke: #e12fbc;\\n}\\n\\nsvg.plot .lineGroup.color5>.line {\\n    stroke: #e6ab02;\\n}\\n\\nsvg.plot .lineGroup.color6>.line {\\n    stroke: #b40e0e;\\n    stroke-dasharray: 7;\\n}\\n\\nsvg.plot .lineGroup.color7>.line {\\n    stroke: #4257b6;\\n    stroke-dasharray: 7;\\n}\\n\\nsvg.plot .lineGroup.color8>.line {\\n    stroke: #18a380;\\n    stroke-dasharray: 7;\\n}\\n\\nsvg.plot .lineGroup.color9>.line {\\n    stroke: #ad27c5;\\n    stroke-dasharray: 7;\\n}\\n\\nsvg.plot .lineGroup.color10>.line {\\n    stroke: #2e2e2e;\\n    stroke-dasharray: 7;\\n}\\n\\nsvg.plot .hoverCursor.color0 {\\n    fill: #f94a01;\\n}\\n\\nsvg.plot .hoverCursor.color1 {\\n    fill: #6b42b6;\\n}\\n\\nsvg.plot .hoverCursor.color2 {\\n    fill: #11a854;\\n}\\n\\nsvg.plot .hoverCursor.color3 {\\n    fill: #128db2;\\n}\\n\\nsvg.plot .hoverCursor.color4 {\\n    fill: #e12fbc;\\n}\\n\\nsvg.plot .hoverCursor.color5 {\\n    fill: #e6ab02;\\n}\\n\\nsvg.plot .hoverCursor.color6 {\\n    fill: #b40e0e;\\n}\\n\\nsvg.plot .hoverCursor.color7 {\\n    fill: #4257b6;\\n}\\n\\nsvg.plot .hoverCursor.color8 {\\n    fill: #18a380;\\n}\\n\\nsvg.plot .hoverCursor.color9 {\\n    fill: #ad27c5;\\n}\\n\\nsvg.plot .hoverCursor.color10 {\\n    fill: #2e2e2e;\\n}\\n\\n.plot.tooltip {\\n    position: relative;\\n    font-family: Arial, Helvetica, sans-serif;\\n    transition: opacity 0.4s cubic-bezier(.75, 0, .84, .05);\\n    opacity: 0.97;\\n    width: 0;\\n    /* (Setting `width` to zero prevents spurious horizontal scroll bar from appearing.) */\\n}\\n\\n@media (max-width: 60em) {\\n    .plot.tooltip {\\n        font-size: 80%;\\n    }\\n}\\n\\n@media (max-width: 40em) {\\n    .plot.tooltip {\\n        font-size: 70%;\\n    }\\n}\\n\\n.plot.tooltip.hidden {\\n    opacity: 0;\\n    pointer-events: none;\\n    transition: opacity 0.2s;\\n}\\n\\n.plot.tooltip.undisplayed {\\n    display: none;\\n}\\n\\n.plot.tooltip>.tooltipInnerContainer {\\n    position: absolute;\\n    transition: transform 0.2s ease;\\n    transform: translateY(0);\\n    bottom: 0;\\n    pointer-events: none;\\n}\\n\\n.plot.tooltip>.tooltipInnerContainer>.tooltipMain {\\n    position: relative;\\n    bottom: 2em;\\n    left: -50%;\\n    border-radius: 0.5em;\\n    box-shadow: 0 0 0.02em 0.15em #fff;\\n    pointer-events: auto;\\n}\\n\\n.plot.tooltip>.tooltipInnerContainer>.tooltipMain>.tooltipContent {\\n    position: relative;\\n    z-index: 2;\\n    border-radius: 0.5em;\\n    padding: 0.5em 0.7em;\\n    white-space: nowrap;\\n    text-align: center;\\n}\\n\\n.plot.tooltip>.tooltipInnerContainer>.tooltipPointer {\\n    position: absolute;\\n    width: 2em;\\n    height: 2em;\\n    bottom: 1.3em;\\n    left: -1em;\\n    transform: rotate(45deg);\\n    box-shadow: 0 0 0.02em 0.15em #fff;\\n    z-index: 1;\\n    pointer-events: auto;\\n}\\n\\n.plot.tooltip.pointsUp>.tooltipInnerContainer {\\n    transform: translateY(100%)\\n}\\n\\n.plot.tooltip.pointsUp>.tooltipInnerContainer>.tooltipMain {\\n    bottom: auto;\\n    top: 2em;\\n}\\n\\n.plot.tooltip.pointsUp>.tooltipInnerContainer>.tooltipPointer {\\n    bottom: auto;\\n    top: 1.3em;\\n}\\n\\n.plot.tooltip.color0>.tooltipInnerContainer>.tooltipMain>.tooltipContent, .plot.tooltip.color0>.tooltipInnerContainer>.tooltipPointer {\\n    background-color: #e2c6ba;\\n}\\n\\n.plot.tooltip.color1>.tooltipInnerContainer>.tooltipMain>.tooltipContent, .plot.tooltip.color1>.tooltipInnerContainer>.tooltipPointer {\\n    background-color: #d0c7df;\\n}\\n\\n.plot.tooltip.color2>.tooltipInnerContainer>.tooltipMain>.tooltipContent, .plot.tooltip.color2>.tooltipInnerContainer>.tooltipPointer {\\n    background-color: #bed3c7;\\n}\\n\\n.plot.tooltip.color3>.tooltipInnerContainer>.tooltipMain>.tooltipContent, .plot.tooltip.color3>.tooltipInnerContainer>.tooltipPointer {\\n    background-color: #b2ced6;\\n}\\n\\n.plot.tooltip.color4>.tooltipInnerContainer>.tooltipMain>.tooltipContent, .plot.tooltip.color4>.tooltipInnerContainer>.tooltipPointer {\\n    background-color: #dbadd3;\\n}\\n\\n.plot.tooltip.color5>.tooltipInnerContainer>.tooltipMain>.tooltipContent, .plot.tooltip.color5>.tooltipInnerContainer>.tooltipPointer {\\n    background-color: #dbc587;\\n}\\n\\n.plot.tooltip.color6>.tooltipInnerContainer>.tooltipMain>.tooltipContent, .plot.tooltip.color6>.tooltipInnerContainer>.tooltipPointer {\\n    background-color: #e4c0c0;\\n}\\n\\n.plot.tooltip.color7>.tooltipInnerContainer>.tooltipMain>.tooltipContent, .plot.tooltip.color7>.tooltipInnerContainer>.tooltipPointer {\\n    background-color: #d5d9ee;\\n}\\n\\n.plot.tooltip.color8>.tooltipInnerContainer>.tooltipMain>.tooltipContent, .plot.tooltip.color8>.tooltipInnerContainer>.tooltipPointer {\\n    background-color: #b6d3cb;\\n}\\n\\n.plot.tooltip.color9>.tooltipInnerContainer>.tooltipMain>.tooltipContent, .plot.tooltip.color9>.tooltipInnerContainer>.tooltipPointer {\\n    background-color: #d6c2da;\\n}\\n\\n.plot.tooltip.color10>.tooltipInnerContainer>.tooltipMain>.tooltipContent, .plot.tooltip.color10>.tooltipInnerContainer>.tooltipPointer {\\n    background-color: #d1d1d1;\\n}\\n\\n.plot.tooltip .lineDescription {\\n    font-weight: bold;\\n    font-size: 120%;\\n    margin-bottom: 0.3em;\\n}\\n\\n.plot.tooltip .mainWord {\\n    font-style: italic;\\n    margin: 0.3em 0;\\n}\\n\\n.plot.tooltip .mainWord::before {\\n    content: '“';\\n}\\n\\n.plot.tooltip .mainWord::after {\\n    content: '”';\\n}\\n\", \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://linguistic-flux-capacitor/./src/plotting/default.css?./node_modules/css-loader/dist/cjs.js");

/***/ }),

/***/ "./src/plotting/default.css":
/*!**********************************!*\
  !*** ./src/plotting/default.css ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var api = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!./default.css */ \"./node_modules/css-loader/dist/cjs.js!./src/plotting/default.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};\n\n//# sourceURL=webpack://linguistic-flux-capacitor/./src/plotting/default.css?");

/***/ }),

/***/ "./src/plotting/main.mjs":
/*!*******************************!*\
  !*** ./src/plotting/main.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createPlot\": () => (/* binding */ createPlot)\n/* harmony export */ });\n/* harmony import */ var _default_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./default.css */ \"./src/plotting/default.css\");\n\n\nfunction createPlot(\n    containerElement, pointsX, ticksX, updateTooltipContents, tooltipTemplate, lineMouseover,\n    lineMouseout\n) {\n    const BORDERS_MIN_X = 54;\n    const BORDERS_MAX_X = 639;\n    const BORDERS_MIN_Y = 1;\n    const BORDERS_MAX_Y = 319;\n\n    const MIN_X = BORDERS_MIN_X + 11;\n    const MAX_X = BORDERS_MAX_X - 11;\n    const MIN_Y = BORDERS_MIN_Y + 6;\n    const MAX_Y = BORDERS_MAX_Y - 6;\n\n    const SVG_WIDTH = 640;\n    const SVG_HEIGHT = 360;\n\n    let cursorTooltip = createTooltip(tooltipTemplate);\n    let coordsX = [];\n    let scaleX = null;\n    let tenTimesMinYValue = null;\n    let tenTimesMaxYValue = null;\n    let scaleY = null;\n    let offsetY = null;\n    let plotPane = null;\n    let xAxis = null;\n    let yAxis = null;\n    let lines = [];\n    let mainLineIndex = null;\n    let hideCursorTimeout = null;\n    let hoverCursorContainer = null;\n    let inputPrompt = null;\n    let mousePrompt = null;\n    let showMousePrompt = true;\n\n    _initialize()\n    return { plotLine, setMainLine, clear, showInputPrompt, hoverLine, unhoverLine, lineToFront };\n\n    function _initialize() {\n        const svg = createSvgElement('svg');\n        svg.classList.add('plot');\n\n        svg.setAttribute('width', SVG_WIDTH);\n        svg.setAttribute('height', SVG_HEIGHT);\n        svg.setAttribute('viewBox', '0 0 640 360');\n\n        xAxis = svg.appendChild(\n            createSvgElement('g', 'xAxis')\n        );\n        yAxis = svg.appendChild(\n            createSvgElement('g', 'yAxis')\n        );\n\n        svg.appendChild(\n            createSvgElement('rect', 'plotBorders', {\n                x: BORDERS_MIN_X,\n                y: BORDERS_MIN_Y,\n                width: BORDERS_MAX_X - BORDERS_MIN_X,\n                height: BORDERS_MAX_Y - BORDERS_MIN_Y,\n            })\n        );\n\n        svg.appendChild(\n            createSvgElement('text', 'axisLabel', {\n                x: 0.5 * (BORDERS_MIN_X + BORDERS_MAX_X),\n                y: SVG_HEIGHT - 5,\n            })\n        ).appendChild(\n            document.createTextNode('year')\n        );\n\n        svg.appendChild(\n            createSvgElement('text', 'axisLabel', {\n                x: -0.5 * (BORDERS_MIN_Y + BORDERS_MAX_Y),\n                y: 16,\n                transform: 'rotate(-90)',\n            })\n        ).appendChild(\n            document.createTextNode('word similarity')\n        );\n\n        let hoverAreasGroup = svg.appendChild(\n            createSvgElement('g')\n        );\n        hoverAreasGroup.appendChild(\n            createSvgElement('rect', 'invisible', {\n                x: BORDERS_MIN_X,\n                y: BORDERS_MIN_Y,\n                width: BORDERS_MAX_X - BORDERS_MIN_X,\n                height: BORDERS_MAX_Y - BORDERS_MIN_Y + 20,\n                'data-index': '',\n            })\n        )\n\n        scaleX = (MAX_X - MIN_X) / (pointsX[pointsX.length - 1] - pointsX[0]);\n        for (let xPoint of pointsX) {\n            coordsX.push(MIN_X + scaleX * (xPoint - pointsX[0]))\n        }\n\n        let ticksIndex = 0;\n        for (let i = 0; i < coordsX.length; i += 1) {\n            let mid_left = i === 0 ?\n                BORDERS_MIN_X : 0.5 * (coordsX[i - 1] + coordsX[i]);\n            let mid_right = i + 1 === coordsX.length ?\n                BORDERS_MAX_X : 0.5 * (coordsX[i] + coordsX[i + 1]);\n            hoverAreasGroup.appendChild(\n                createSvgElement('rect', 'invisible', {\n                    x: mid_left,\n                    y: BORDERS_MIN_Y,\n                    width: mid_right - mid_left,\n                    height: BORDERS_MAX_Y - BORDERS_MIN_Y + 20,\n                    'data-index': i,\n                })\n            );\n\n            if (pointsX[i] == ticksX[ticksIndex]) {\n                xAxis.appendChild(\n                    createSvgElement('path', 'axisTick', {\n                        d: 'M ' + coordsX[i] + ',' + BORDERS_MAX_Y + ' v -5',\n                    })\n                );\n                xAxis.appendChild(\n                    createSvgElement('path', 'axisTick', {\n                        d: 'M ' + coordsX[i] + ',' + BORDERS_MIN_Y + ' v 5',\n                    })\n                );\n\n                xAxis.appendChild(\n                    createSvgElement('text', 'axisTickLabel', {\n                        x: coordsX[i],\n                        y: BORDERS_MAX_Y + 15,\n                    })\n                ).appendChild(\n                    document.createTextNode('' + ticksX[ticksIndex])\n                );\n\n                ticksIndex += 1;\n            }\n        }\n\n        plotPane = svg.appendChild(\n            createSvgElement('g')\n        );\n\n        hoverCursorContainer = svg.appendChild(\n            createSvgElement('g', ['hoverCursorContainer', 'hidden'])\n        );\n\n        inputPrompt = createSvgElement('text', 'plotPrompt', { y: 80 });\n        ['↑', 'enter a word into', 'the above field.'].forEach((text, index) => {\n            let tspan = createSvgElement('tspan', null, { x: 347, dy: ['0', '1.2em', '1.1em'][index] });\n            tspan.appendChild(document.createTextNode(text));\n            inputPrompt.appendChild(tspan);\n        });\n        svg.appendChild(inputPrompt);\n\n        mousePrompt = createSvgElement('g', 'plotPrompt');\n        for (let i = 0; i < 2; i += 1) {\n            let current = createSvgElement('text', i === 0 ? 'plotPromptOutline' : '', { y: 95 });\n            ['Move mouse', 'across this area', 'to explore more.'].forEach((text, index) => {\n                let tspan = createSvgElement('tspan', null, { x: 347, dy: index === 0 ? '0' : '1.2em' });\n                tspan.appendChild(document.createTextNode(text));\n                current.appendChild(tspan);\n            });\n            mousePrompt.appendChild(current);\n        }\n        let removeLinePrompt = () => {\n            showMousePrompt = false;\n            mousePrompt.style.opacity = 0;\n            setTimeout(() => mousePrompt.style.display = 'none', 500);\n        };\n        mousePrompt.addEventListener('mouseover', removeLinePrompt);\n        mousePrompt.addEventListener('click', removeLinePrompt);\n\n        svg.appendChild(mousePrompt);\n\n        // Add invisible area just above or below cursor to prevent mouseover\n        // events when the user moves from the cursor to the tooltip.\n        hoverCursorContainer.appendChild(\n            createSvgElement('rect', ['invisible', 'noCaptureZone'], {\n                x: -40,\n                y: -45,\n                width: 80,\n                height: 47,\n            })\n        );\n\n        let hoverCursor = hoverCursorContainer.appendChild(\n            createSvgElement('circle', 'hoverCursor', {\n                cx: 0,\n                cy: 0,\n                r: 8,\n                'data-index': '',\n            })\n        );\n\n        let hoverColorIndex = null;\n        let hoverOver = event => {\n            if (mainLineIndex !== null) {\n                clearTimeout(hideCursorTimeout);\n                let index = event.target.getAttribute('data-index');\n                let x = coordsX[index];\n                if (typeof x !== 'undefined') {\n                    let line = lines[mainLineIndex];\n                    let y = line.coordsY[index];\n                    let svgBox = svg.getBoundingClientRect();\n                    let svgTop = svgBox.top;\n                    let svgBottom = svgBox.bottom;\n                    let mouseY = ((event.clientY - svgTop) / (svgBottom - svgTop)) * SVG_HEIGHT;\n                    hoverCursorContainer.setAttribute('transform', 'translate(' + x + ',' + y + ')');\n\n                    if (line.colorIndex !== hoverColorIndex) {\n                        hoverCursor.classList.remove('color' + hoverColorIndex);\n                        hoverColorIndex = line.colorIndex;\n                        hoverCursor.classList.add('color' + hoverColorIndex);\n                    }\n                    hoverCursorContainer.classList.remove('hidden');\n\n                    if (showMousePrompt) {\n                        showMousePrompt = false;\n                        mousePrompt.style.opacity = 0;\n                        setTimeout(() => mousePrompt.style.display = 'none', 500);\n                    }\n\n                    updateTooltipContents(cursorTooltip, line, index);\n                    showTooltip(cursorTooltip, line, index, mouseY < y);\n                }\n            }\n        };\n\n        hoverCursorContainer.addEventListener('mouseover', hoverOver);\n        cursorTooltip.querySelector('.tooltipMain').addEventListener('mouseover', hoverOver);\n        cursorTooltip.querySelector('.tooltipPointer').addEventListener('mouseover', hoverOver);\n        hoverAreasGroup.addEventListener('mouseover', hoverOver);\n\n        hoverCursorContainer.addEventListener('mouseout', hoverOut);\n        cursorTooltip.querySelector('.tooltipMain').addEventListener('mouseout', hoverOut);\n        cursorTooltip.querySelector('.tooltipPointer').addEventListener('mouseout', hoverOut);\n        hoverAreasGroup.addEventListener('mouseout', hoverOut);\n\n        // containerElement.style.position = 'relative';\n        containerElement.appendChild(cursorTooltip);\n        containerElement.appendChild(svg);\n    }\n\n    function plotLine(valuesY, colorIndex, styleIndex, payload, isMainLine, title) {\n        isMainLine = !!isMainLine || lines.length === 0;\n\n        inputPrompt.style.opacity = 0;\n        setTimeout(() => {\n            if (inputPrompt.style.opacity == 0) { // Yes, we want == and not === here.\n                inputPrompt.style.display = 'none';\n            }\n        }, 500);\n        if (showMousePrompt) {\n            mousePrompt.style.display = 'block';\n            mousePrompt.style.opacity = 0.7;\n        }\n\n        const cur10MinYValue = 10 * Math.min(...valuesY);\n        const cur10MaxYValue = 10 * Math.max(...valuesY);\n\n        hideTooltip();\n\n        if (scaleY === null\n            || cur10MinYValue < tenTimesMinYValue\n            || cur10MaxYValue > tenTimesMaxYValue\n        ) {\n            tenTimesMinYValue = tenTimesMinYValue === null ?\n                cur10MinYValue : Math.min(tenTimesMinYValue, cur10MinYValue);\n            tenTimesMaxYValue = tenTimesMaxYValue === null ?\n                cur10MaxYValue : Math.max(tenTimesMaxYValue, cur10MaxYValue);\n\n            let displayRangeTop = Math.min(\n                10, 1.02 * tenTimesMaxYValue - 0.02 * tenTimesMinYValue);\n            let displayRangeBottom = Math.max(\n                -10, 1.02 * tenTimesMinYValue - 0.02 * tenTimesMaxYValue);\n\n            // Make sure that there are at least 2 viable y-axis ticks (at one decimal precision).\n            if (Math.floor(displayRangeTop) - Math.ceil(displayRangeBottom) <= 0) {\n                displayRangeBottom = Math.ceil(displayRangeBottom - 1);\n                displayRangeTop = Math.floor(displayRangeTop + 1);\n            }\n            if (displayRangeTop > 10) {\n                displayRangeBottom -= displayRangeTop - 10;\n                displayRangeTop = 10;\n            } else if (displayRangeBottom < -10) {\n                displayRangeTop -= displayRangeBottom + 10;\n                displayRangeBottom = 10;\n            }\n\n            scaleY = 10 * (MIN_Y - MAX_Y) / (displayRangeTop - displayRangeBottom);\n            offsetY = MIN_Y - 0.1 * displayRangeTop * scaleY;\n\n            // Update y-axis ticks.\n            while (yAxis.childNodes.length !== 0) {\n                // For some reason, this has to be called in an extra loop or else it won't\n                // remove all child nodes.\n                yAxis.childNodes.forEach(child => yAxis.removeChild(child));\n            }\n            let multiples = [1, 2, 5];\n            let lowestYTick = Math.ceil(displayRangeBottom);\n            while ((displayRangeTop - lowestYTick) / multiples[0] >= 7 && multiples.length !== 1) {\n                multiples.shift();\n                lowestYTick += multiples[0] - 1 - (19 + lowestYTick) % multiples[0];\n            }\n            if (lowestYTick <= 0 && displayRangeTop >= 0) {\n                // Draw zero line\n                yAxis.appendChild(\n                    createSvgElement('path', 'zeroLine', {\n                        d: 'M ' + BORDERS_MIN_X + ',' + offsetY + ' h ' + (BORDERS_MAX_X - BORDERS_MIN_X)\n                    })\n                );\n            }\n            for (let pos = lowestYTick; pos <= displayRangeTop; pos += multiples[0]) {\n                let tickY = 0.1 * pos * scaleY + offsetY;\n                yAxis.appendChild(\n                    createSvgElement('path', 'axisTick', {\n                        d: 'M ' + BORDERS_MIN_X + ',' + tickY + ' h 5',\n                    })\n                );\n                yAxis.appendChild(\n                    createSvgElement('path', 'axisTick', {\n                        d: 'M ' + BORDERS_MAX_X + ',' + tickY + ' h -5',\n                    })\n                );\n\n                yAxis.appendChild(\n                    createSvgElement('text', 'axisTickLabel', {\n                        x: BORDERS_MIN_X - 3,\n                        y: tickY + 5.65236,\n                    })\n                ).appendChild(\n                    document.createTextNode((0.1 * pos).toFixed(1))\n                );\n            }\n\n            // Rescale all existing lines.\n            for (let line of lines) {\n                // TODO: factor out code duplication (see below).\n                line.coordsY = line.valuesY.map(value => value * scaleY + offsetY);\n                const pathD = 'M ' + coordsX.map(\n                    (x, i) => x + ',' + line.coordsY[i]).join(' ');\n                line.lineGroup.childNodes.forEach(\n                    child => child.setAttribute('d', pathD)\n                );\n            }\n        }\n\n        const coordsY = valuesY.map(value => value * scaleY + offsetY);\n        const pathD = 'M ' + coordsX.map((x, i) => x + ',' + coordsY[i]).join(' ');\n\n        let classNames = ['lineGroup', 'color' + colorIndex];\n        const lineGroup = createSvgElement('g', classNames);\n\n        plotPane.insertBefore(lineGroup, plotPane.firstChild);\n\n        lineGroup.appendChild(\n            createSvgElement('path', 'bleed', {\n                d: pathD\n            })\n        );\n        lineGroup.appendChild(\n            createSvgElement('path', 'line', {\n                d: pathD\n            })\n        );\n\n        let mouseCapture = createSvgElement('path', 'mouseCapture', {\n            d: pathD,\n        });\n        let hoverTitle = createSvgElement('title');\n        hoverTitle.appendChild(document.createTextNode(title));\n        mouseCapture.appendChild(hoverTitle)\n        lineGroup.appendChild(mouseCapture);\n\n        let line = {\n            valuesY,\n            coordsY,\n            colorIndex,\n            styleIndex,\n            lineGroup,\n            payload,\n        };\n\n        lineGroup.addEventListener('click', () => {\n            if (showMousePrompt) {\n                showMousePrompt = false;\n                mousePrompt.style.opacity = 0;\n                setTimeout(() => mousePrompt.style.display = 'none', 500);\n            }\n\n            setMainLine(lines.indexOf(line));\n        });\n        lineGroup.addEventListener('mouseover', () => lineMouseover(lines.indexOf(line)));\n        lineGroup.addEventListener('mouseout', () => lineMouseout(lines.indexOf(line)));\n        lines.push(line);\n\n        if (isMainLine) {\n            setMainLine(lines.length - 1);\n        }\n    }\n\n    function hoverLine(index) {\n        if (mainLineIndex !== null) {\n            lines[mainLineIndex].lineGroup.classList.remove('main');\n        }\n        let selectedLine = lines[index];\n        if (typeof selectedLine !== 'undefined') {\n            selectedLine.lineGroup.classList.add('hovering');\n        }\n    }\n\n    function unhoverLine(index) {\n        let selectedLine = lines[index];\n        if (typeof selectedLine !== 'undefined') {\n            selectedLine.lineGroup.classList.remove('hovering');\n        }\n        if (mainLineIndex !== null) {\n            lines[mainLineIndex].lineGroup.classList.add('main');\n        }\n    }\n\n    function clear() {\n        hideTooltip();\n        tenTimesMinYValue = null;\n        tenTimesMaxYValue = null;\n        scaleY = null;\n        offsetY = null;\n        lines = [];\n        mainLineIndex = null;\n\n        while (yAxis.childNodes.length !== 0) {\n            // For some reason, this has to be called in an extra loop or else it won't\n            // remove all child nodes.\n            yAxis.childNodes.forEach(child => yAxis.removeChild(child));\n        }\n        while (plotPane.childNodes.length != 0) {\n            plotPane.childNodes.forEach(el => el.remove());\n        }\n    }\n\n    function showInputPrompt() {\n        if (showMousePrompt) {\n            mousePrompt.style.opacity = 0;\n            setTimeout(() => {\n                if (mousePrompt.style.opacity == 0) { // Yes, we want == and not === here.\n                    mousePrompt.style.display = 'none';\n                }\n            }, 500);\n        }\n\n        inputPrompt.style.display = 'block';\n        inputPrompt.style.opacity = 0.7;\n    }\n\n    function hideTooltip() {\n        hoverCursorContainer.classList.add('hidden');\n        cursorTooltip.classList.add('hidden');\n        // Set `display: none` on tooltip once it's faded out so that it doesn't users\n        // can access page elements underneath it.\n        setTimeout(() => cursorTooltip.classList.add('undisplayed'), 300);\n    }\n\n    function hoverOut() {\n        hideCursorTimeout = setTimeout(hideTooltip, 400);\n    }\n\n    function setMainLine(lineIndex) {\n        let selectedLine = lines[lineIndex];\n        if (typeof selectedLine !== 'undefined') {\n            lineMouseout(lineIndex);\n\n            let previousMainLine = lines[mainLineIndex];\n            if (typeof previousMainLine !== 'undefined') {\n                previousMainLine.lineGroup.classList.remove('main');\n            }\n            mainLineIndex = lineIndex;\n\n            selectedLine.lineGroup.classList.add('main');\n            lineToFront(lineIndex);\n        }\n    }\n\n    function lineToFront(lineIndex) {\n        if (typeof lineIndex === 'undefined') {\n            lineIndex = mainLineIndex;\n        }\n        let selectedLine = lines[lineIndex];\n        if (typeof selectedLine !== 'undefined') {\n            const lineGroup = selectedLine.lineGroup;\n            lineGroup.remove();\n            plotPane.appendChild(lineGroup)\n        }\n    }\n\n    function showTooltip(tooltip, line, index, showBelow) {\n        let oldColorIndex = tooltip.getAttribute('data-color-index');\n        if ((oldColorIndex != line.colorIndex)) {\n            tooltip.classList.remove('color' + oldColorIndex);\n            tooltip.classList.add('color' + line.colorIndex);\n            tooltip.setAttribute('data-color-index', line.colorIndex);\n        }\n\n        let coordY = line.coordsY[index];\n        let x = coordsX[index] * containerElement.offsetWidth / SVG_WIDTH;\n        let y = coordY * containerElement.offsetHeight / SVG_HEIGHT;\n        tooltip.style.left = x + 'px';\n        tooltip.style.top = y + 'px';\n\n        if (showBelow) {\n            tooltip.classList.add('pointsUp');\n            hoverCursorContainer.classList.add('upsideDown');\n        } else {\n            tooltip.classList.remove('pointsUp');\n            hoverCursorContainer.classList.remove('upsideDown');\n        }\n\n        tooltip.classList.remove('hidden');\n        tooltip.classList.remove('undisplayed');\n    }\n}\n\nfunction createSvgElement(tagName, classNames, attributes) {\n    const element = document.createElementNS('http://www.w3.org/2000/svg', tagName);\n\n    if (classNames) {\n        if (typeof classNames === 'string') {\n            element.classList.add(classNames);\n        } else {\n            for (let c of classNames) {\n                element.classList.add(c);\n            }\n        }\n    }\n\n    if (attributes) {\n        for (var key in attributes) {\n            if (attributes.hasOwnProperty(key)) {\n                element.setAttribute(key, '' + attributes[key]);\n            }\n        }\n    }\n\n    return element;\n}\n\nfunction createTooltip(template) {\n    const tooltip = document.createElement('div');\n    tooltip.setAttribute('data-color-index', '0');\n    tooltip.classList.add('plot');\n    tooltip.classList.add('tooltip');\n    tooltip.classList.add('hidden');\n    tooltip.classList.add('undisplayed');\n    tooltip.classList.add('color0');\n    tooltip.appendChild(template);\n\n    return tooltip;\n}\n\n\n//# sourceURL=webpack://linguistic-flux-capacitor/./src/plotting/main.mjs?");

/***/ })

}]);